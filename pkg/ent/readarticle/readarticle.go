// Code generated by ent, DO NOT EDIT.

package readarticle

import (
	"time"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the readarticle type in the database.
	Label = "read_article"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldArticleID holds the string denoting the article_id field in the database.
	FieldArticleID = "article_id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldReadAt holds the string denoting the read_at field in the database.
	FieldReadAt = "read_at"
	// EdgeArticle holds the string denoting the article edge name in mutations.
	EdgeArticle = "article"
	// Table holds the table name of the readarticle in the database.
	Table = "read_articles"
	// ArticleTable is the table that holds the article relation/edge.
	ArticleTable = "read_articles"
	// ArticleInverseTable is the table name for the Article entity.
	// It exists in this package in order to avoid circular dependency with the "article" package.
	ArticleInverseTable = "articles"
	// ArticleColumn is the table column denoting the article relation/edge.
	ArticleColumn = "article_id"
)

// Columns holds all SQL columns for readarticle fields.
var Columns = []string{
	FieldID,
	FieldArticleID,
	FieldUserID,
	FieldReadAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultReadAt holds the default value on creation for the "read_at" field.
	DefaultReadAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)
