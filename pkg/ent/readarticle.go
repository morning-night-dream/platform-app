// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/morning-night-dream/platform-app/pkg/ent/article"
	"github.com/morning-night-dream/platform-app/pkg/ent/readarticle"
)

// ReadArticle is the model entity for the ReadArticle schema.
type ReadArticle struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// ArticleID holds the value of the "article_id" field.
	ArticleID uuid.UUID `json:"article_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// ReadAt holds the value of the "read_at" field.
	ReadAt time.Time `json:"read_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ReadArticleQuery when eager-loading is set.
	Edges ReadArticleEdges `json:"edges"`
}

// ReadArticleEdges holds the relations/edges for other nodes in the graph.
type ReadArticleEdges struct {
	// Article holds the value of the article edge.
	Article *Article `json:"article,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ArticleOrErr returns the Article value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReadArticleEdges) ArticleOrErr() (*Article, error) {
	if e.loadedTypes[0] {
		if e.Article == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: article.Label}
		}
		return e.Article, nil
	}
	return nil, &NotLoadedError{edge: "article"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ReadArticle) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case readarticle.FieldReadAt:
			values[i] = new(sql.NullTime)
		case readarticle.FieldID, readarticle.FieldArticleID, readarticle.FieldUserID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ReadArticle", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ReadArticle fields.
func (ra *ReadArticle) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case readarticle.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ra.ID = *value
			}
		case readarticle.FieldArticleID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field article_id", values[i])
			} else if value != nil {
				ra.ArticleID = *value
			}
		case readarticle.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				ra.UserID = *value
			}
		case readarticle.FieldReadAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field read_at", values[i])
			} else if value.Valid {
				ra.ReadAt = value.Time
			}
		}
	}
	return nil
}

// QueryArticle queries the "article" edge of the ReadArticle entity.
func (ra *ReadArticle) QueryArticle() *ArticleQuery {
	return NewReadArticleClient(ra.config).QueryArticle(ra)
}

// Update returns a builder for updating this ReadArticle.
// Note that you need to call ReadArticle.Unwrap() before calling this method if this ReadArticle
// was returned from a transaction, and the transaction was committed or rolled back.
func (ra *ReadArticle) Update() *ReadArticleUpdateOne {
	return NewReadArticleClient(ra.config).UpdateOne(ra)
}

// Unwrap unwraps the ReadArticle entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ra *ReadArticle) Unwrap() *ReadArticle {
	_tx, ok := ra.config.driver.(*txDriver)
	if !ok {
		panic("ent: ReadArticle is not a transactional entity")
	}
	ra.config.driver = _tx.drv
	return ra
}

// String implements the fmt.Stringer.
func (ra *ReadArticle) String() string {
	var builder strings.Builder
	builder.WriteString("ReadArticle(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ra.ID))
	builder.WriteString("article_id=")
	builder.WriteString(fmt.Sprintf("%v", ra.ArticleID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", ra.UserID))
	builder.WriteString(", ")
	builder.WriteString("read_at=")
	builder.WriteString(ra.ReadAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ReadArticles is a parsable slice of ReadArticle.
type ReadArticles []*ReadArticle
