// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: version/v1/version.proto

package versionv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/morning-night-dream/platform-app/pkg/connect/version/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// VersionServiceName is the fully-qualified name of the VersionService service.
	VersionServiceName = "version.v1.VersionService"
)

// VersionServiceClient is a client for the version.v1.VersionService service.
type VersionServiceClient interface {
	// 確認
	Confirm(context.Context, *connect_go.Request[v1.ConfirmRequest]) (*connect_go.Response[v1.ConfirmResponse], error)
}

// NewVersionServiceClient constructs a client for the version.v1.VersionService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewVersionServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) VersionServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &versionServiceClient{
		confirm: connect_go.NewClient[v1.ConfirmRequest, v1.ConfirmResponse](
			httpClient,
			baseURL+"/version.v1.VersionService/Confirm",
			opts...,
		),
	}
}

// versionServiceClient implements VersionServiceClient.
type versionServiceClient struct {
	confirm *connect_go.Client[v1.ConfirmRequest, v1.ConfirmResponse]
}

// Confirm calls version.v1.VersionService.Confirm.
func (c *versionServiceClient) Confirm(ctx context.Context, req *connect_go.Request[v1.ConfirmRequest]) (*connect_go.Response[v1.ConfirmResponse], error) {
	return c.confirm.CallUnary(ctx, req)
}

// VersionServiceHandler is an implementation of the version.v1.VersionService service.
type VersionServiceHandler interface {
	// 確認
	Confirm(context.Context, *connect_go.Request[v1.ConfirmRequest]) (*connect_go.Response[v1.ConfirmResponse], error)
}

// NewVersionServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewVersionServiceHandler(svc VersionServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/version.v1.VersionService/Confirm", connect_go.NewUnaryHandler(
		"/version.v1.VersionService/Confirm",
		svc.Confirm,
		opts...,
	))
	return "/version.v1.VersionService/", mux
}

// UnimplementedVersionServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedVersionServiceHandler struct{}

func (UnimplementedVersionServiceHandler) Confirm(context.Context, *connect_go.Request[v1.ConfirmRequest]) (*connect_go.Response[v1.ConfirmResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("version.v1.VersionService.Confirm is not implemented"))
}
